{"version":3,"sources":["Header.jsx","Input.jsx","Task.jsx","MainSection.jsx","Footer.jsx","index.js"],"names":["Header","className","Input","props","ref","inputRef","placeholder","onKeyPress","e","pressEnter","onClick","Task","hideItem","type","onChange","handleCheck","id","task","target","checked","done","itemDefaultClass","text","editTask","index","item","deleteTask","MainSection","useState","tasks","setTasks","showTextArea","edit","setEdit","useRef","editRef","addTask","input","console","log","nanoid","onAddBtnClick","clear","current","value","map","check","tasksCopy","splice","prev","useEffect","code","newText","testArr","submitEdit","editText","i","undefined","editInput","setTaskCheck","Footer","href","ToDoList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b95fb446.chunk.js","sourcesContent":["import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n\r\nfunction Header(){\r\n  return (\r\n    <header className=\"w-screen bg-red-200 text-center hidden\">This is the header</header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';//, {useState, useRef, useEffect}\r\n// import ReactDOM from 'react-dom';\r\nimport './../src/customStyles.css'\r\n\r\n\r\nconst Input = (props)=> {\r\n\r\n  return (\r\n\r\n    <div className='grid grid-flow-row auto-rows-auto'>\r\n    {/*whitespace-nowrap*/}\r\n    <input\r\n    ref={props.inputRef}\r\n    className='rounded-t font-bold text-green-600 py-2 h-full w-full px-2 border-white bg-red-300-100 text-white'\r\n    placeholder='Enter a new task'\r\n    onKeyPress={(e)=>{props.pressEnter(e)}}/>\r\n\r\n    <button\r\n    className='font-bold h-auto w-full text-gray-900 bg-yellow-300 rounded-b hover:bg-yellow-400 transition-colors'\r\n    onClick={(e)=>{props.onClick(e)}}>\r\n    <h1 className='w-full h-full py-2 hover:text-gray-500 transition-colors hover:bg-yellow-300'>Add New</h1>\r\n    </button>\r\n    {/*#70D6FF*/}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\nconst Task = (props)=>{\r\n\r\n  return(\r\n\r\n    <div className={`${props.hideItem} bg-white w-full flex flex-col rounded`}>\r\n\r\n    <span className='flex p-2 w-full'>\r\n\r\n      <label\r\n      className='flex flex-col justify-center transform hover:scale-110 motion-reduce:transform-none '>\r\n        <input\r\n        type=\"checkbox\"\r\n        onChange={(e) => props.handleCheck(props.id, props.task, e.target.checked, e)}\r\n        checked={props.done}\r\n        className='check bg-black'/>\r\n      </label>\r\n\r\n      <p\r\n      className={props.done ? `line-through ${props.itemDefaultClass}` : props.itemDefaultClass}>\r\n      {props.text}\r\n      </p>\r\n\r\n      {/* the edit and delete buttons section*/}\r\n      <span\r\n      className='flex text-lg'>\r\n      <button\r\n      className='flex m-1 p-2 transform hover:text-gray-700 motion-reduce:transform-none'\r\n      onClick={(e)=>{props.editTask(props.index,props.checked,props.item,e)}}>\r\n      <i className=\"fas fa-edit\"></i>\r\n      </button>\r\n      <button\r\n      className={`flex m-1 p-2 transform hover:text-gray-700 motion-reduce:transform-none ${(props.checked)?' text-red-600':''}`}\r\n      onClick={(e)=>{props.deleteTask(props.index,props.checked,props.item,e)}}>\r\n      {/*onClick={(e)=>{props.deleteTask(props.index,props.checked,props.item,e)}}*/}\r\n      <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n      </span>\r\n\r\n    </span>\r\n    <hr className='border'/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","// import {tasks} from './TodoList';\r\n//{useState, useRef, useEffect}\r\nimport React,{ useState, useRef, useEffect } from 'react';\r\nimport Input from './Input';\r\nimport Task from './Task';\r\nimport { nanoid } from 'nanoid';\r\n\r\n\r\n\r\nconst MainSection = ()=> {\r\n\r\n  // create a state, which is an array of all task items\r\n  let[tasks, setTasks] = useState(\r\n    [\r\n      {id: '1pTByY', text: 'Do the dishes', done: true},\r\n      {id: '1pQCyY', text: 'Go home', done: false},\r\n      {id: '0yAVtP', text: 'Learn React', done: true}\r\n    ]\r\n  );\r\n\r\n  let [edit, setEdit] = useState(\r\n    {\r\n      showTextArea: false,\r\n      index: 0,\r\n      text: '',\r\n      e: ''\r\n    }\r\n  );\r\n  // use ref, to reference the inout box related to the button\r\n  const inputRef = useRef();\r\n  const editRef = useRef();\r\n\r\n  // function to add new tasks\r\n  function addTask(input){\r\n    console.log(`%cinput: %c${input}`,'color: lime','color: yellow');\r\n\r\n    /*the nanoid(6) method generates a new random 6-char id for each newly added task*/\r\n    setTasks([ { id: nanoid(6), text: input, done: false }, ...tasks ]);\r\n\r\n  };\r\n\r\n  // function for button onClick\r\n  function onAddBtnClick(e){\r\n  console.clear();\r\n\r\n  // pass the input value of the input box (which was stored in the ref of the input box JSX element),\r\n  // into the buttons's addtask function\r\n\r\n  addTask(inputRef.current.value);\r\n\r\n  // thene clear the input from teh input box\r\n  inputRef.current.value = '';\r\n}\r\n\r\n  function pressEnter(e){\r\n\r\n  if(e.code === 'Enter'){\r\n    console.log('SUBMIT');\r\n    onAddBtnClick(e);\r\n  }\r\n  else{\r\n    console.clear();\r\n    console.log('pressed ', e.code);\r\n    return;\r\n  }\r\n\r\n}\r\n\r\n  function handleCheck(id, task, done, e){\r\n\r\n    setTasks(tasks.map(task =>{\r\n\r\n    // if the task item's 6-char id\r\n    // is equal to the id of the checkbox's corresponding jsx element\r\n    if (task.id === id ){\r\n      return { ...task, done }\r\n    }\r\n    else{\r\n      return task;\r\n    }\r\n  }));\r\n}\r\n\r\n  function deleteTask(index, check, task, e){\r\n\r\n    console.clear();\r\n\r\n    let tasksCopy = tasks.map(task=>task);\r\n\r\n    if(index !== -1){\r\n\r\n      tasksCopy.splice(index, 1);\r\n\r\n      setTasks([...tasksCopy]);\r\n\r\n    }\r\n}\r\n\r\n  function editTask(index, check, task, e){\r\n\r\n    console.clear();\r\n\r\n    setEdit(prev=>{\r\n\r\n      return {showTextArea: !edit.showTextArea, index: index, text: task.text, e: e}\r\n\r\n    });\r\n}\r\n\r\n  function editText(e, index){\r\n\r\n    index = edit.index;\r\n\r\n    setEdit(prev=>{\r\n      return {showTextArea: edit.showTextArea, index: edit.index, text: e.target.value, e: e}\r\n    });\r\n  }\r\n\r\n  function submitEdit(e, newText, submitBool=edit.showTextArea, itemText){\r\n\r\n    console.clear();\r\n\r\n    let testArr = tasks.map(task=>task);\r\n\r\n    testArr[edit.index].text = newText;\r\n\r\n    setTasks([...testArr]);\r\n\r\n    setEdit(prev=>{\r\n      return {showTextArea: !edit.showTextArea, index: '', text: '', e: edit.e}\r\n    });\r\n  }\r\n\r\n  useEffect((prev)=>{\r\n    // console.log(`index: %c${edit.index}`, 'color: lime');\r\n    // console.log(`edit.text: %c${edit.text}`, 'color: lime');\r\n    // console.log(`edit.showTextArea is %c${edit.showTextArea}`, 'color: orange');\r\n    // console.log((edit.showTextArea)?'%cis editing...':'%cDone editing!','color: lime');\r\n  },[edit.index, edit.showTextArea]);\r\n\r\n  return (\r\n      <main className='w-screen h-full bg-green-400 flex flex-col justify-center items-stretch p-2'>\r\n      <div className={`bg-gray-600\r\n        border border-black\r\n        shadow-lg rounded\r\n        flex flex-col justify-stretch\r\n        h-auto max-h-full\r\n        lg:max-h-full lg:h-auto\r\n        md:max-h-full md:h-auto\r\n        sm:max-h-64`}>\r\n\r\n\r\n      <div\r\n      className={`${(edit.showTextArea)?'hidden':''}`}>\r\n      <Input\r\n      inputRef={inputRef}\r\n      addTask={addTask}\r\n      onClick={onAddBtnClick}\r\n      pressEnter={pressEnter}/>\r\n      </div>\r\n\r\n      {/* the textarea elements*/}\r\n      <div className={`overflow-hidden bg-yellow-400 ${(!edit.showTextArea)?'hidden':''}`}>\r\n      {/* the button to submit the edit*/}\r\n      <div\r\n      className='flex flex-col justify-center items-center bg-green-500 h-10'>\r\n      <button\r\n      className='flex flex-col justify-center items-center h-full w-full'\r\n      onClick={e=>{submitEdit(e,edit.text)}}>\r\n      {/* <i className=\"fas fa-edit\"></i>*/}\r\n      <i className=\"w-full h-full pt-2 text-white border border-green-500 transition-opacity hover:text-black hover:opacity-50 fas fa-check\"></i>\r\n      </button>\r\n      </div>\r\n\r\n      <div\r\n      className='h-auto max-h-screen overflow-y-hidden'>\r\n\r\n      {/* the textarea*/}\r\n      <div className='flex flex-col bg-red-500 w-full h-64 overflow-x-hidden max-h-screen'>\r\n      <div className='bg-blue-400 w-full h-full'>\r\n      {/* TA JSX element goes here*/}\r\n      <textarea\r\n      ref={editRef}\r\n      className={`resize-none w-full h-full bg-blue-100 max-h-screen ${(!edit.showTextArea)?'':''}`}\r\n      value={edit.text}\r\n      onChange={(e)=>{editText(e)}}>\r\n      </textarea>\r\n      </div>\r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n\r\n      <div className='w-full h-auto overflow-y-auto sm:max-h-full h-64 bg-gray-300 rounded-b'>\r\n\r\n          {/*#D35269, #CCFF00, #70D6FF, #495159*/}\r\n\r\n          {useEffect(()=>{\r\n            console.log('%cin-line side effect','color: magenta');\r\n          },[tasks])}\r\n\r\n          {tasks.map((item, i) =>{\r\n\r\n            return ( <Task\r\n              key={i}\r\n              editRef={editRef}\r\n              index={i}\r\n              text={!(item.text === undefined)&&item.text}\r\n              id={item.id}\r\n              item={item}\r\n              done={item.done}\r\n              itemDefaultClass='font-semibold whitespace-normal px-2 w-full h-auto min-h-4 break-words flex flex-col justify-center'\r\n              handleCheck={handleCheck}\r\n              hideItem={(edit.showTextArea)?'hidden':''}\r\n              editTask={editTask}\r\n              editInput=''\r\n              deleteTask={deleteTask}\r\n              setTaskCheck=''/> );\r\n          })}\r\n\r\n      </div>\r\n      </div>\r\n      </main>\r\n  );\r\n}\r\n\r\nexport default MainSection;\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n\r\n\r\nconst Footer = ()=>(\r\n  <footer className='w-screen h-20 bg-green-200 text-center hidden'>\r\n  This is the footer\r\n  <a className='hidden' href=\"https://icons8.com/icon/Me0Cfu0sqzE3/trash\">Trash icon by Icons8</a>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nimport Header from './Header';\nimport MainSection from './MainSection';\nimport Footer from './Footer';\n\nfunction ToDoList(){\n  return(\n    <>\n      <Header/>\n      <MainSection/>\n      <Footer/>\n    </>\n  );\n}\n\n\nReactDOM.render(<ToDoList />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}